" File: .vimrc
" Author: Yan Facai <facai.yan@gmail.com>
"
set nocompatible

filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

"" 插件管理
Plugin 'VundleVim/Vundle.vim'

" ----- Making Vim look good ------------------------------------------
"" 色彩方案
Plugin 'altercation/vim-colors-solarized'

"" 状态栏
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

" ----- Vim as a programmer's text editor -----------------------------
"" 路径目录
Plugin 'scrooloose/nerdtree'
""" making NERDTree feel like a true panel, independent of tabs.
Plugin 'jistr/vim-nerdtree-tabs'

"" 语法检查
"Plugin 'scrooloose/syntastic'

"" 异步编译
Plugin 'tpope/vim-dispatch'

"" 标签
""" 自动生成标签
Plugin 'szw/vim-tags'
""" 标签侧栏
Plugin 'majutsushi/tagbar'

"" 模糊文件检索
Plugin 'ctrlpvim/ctrlp.vim'

"" 自动补全
Plugin 'Shougo/neocomplete.vim'

"" scala
Plugin 'derekwyatt/vim-scala'

" ----- Working with Git ----------------------------------------------
"" 显示变动行
Plugin 'airblade/vim-gitgutter'
"" 绑定git命令
Plugin 'tpope/vim-fugitive'

" ----- Other text editing features -----------------------------------
"" 配对符号补全
Plugin 'Raimondi/delimitMate'

" Highlight and strip trailing whitespace
Plugin 'ntpeters/vim-better-whitespace'

" Latex
"Plugin 'VOoM'

call vundle#end()


filetype plugin indent on
syntax on


"set textwidth=79    " Maximum width of text that is being inserted. A longer
                    " line will be broken after white space to get this width.

"set formatoptions=tcqmM	" line break can follow an Asian Char and DO NOT insert space before
						" or after an Asian Char

"vimdiff auto wrap long line
"autocmd FilterWritePre * if &diff | setlocal wrap< | endif
au VimEnter * if &diff | execute 'windo set wrap linebreak nolist' | endif

" --- General settings ---
set tabstop=4
set shiftwidth=4	" numbers of spaces to (auto)indent
set softtabstop=4   " backspace del 4 charac
set backspace=2     " make backspace could del line breaks, indentation and so on
" make "tab" insert indents instead of tabs at the beginning of a line
set smarttab

" always uses spaces instead of tab characters
set expandtab

set scrolloff=3
set history=500
set showcmd
set ruler
set encoding=utf-8
set fileencodings=utf-8,gb2312,gbk,gb18030,iso-2022-jp,euc-jp,cp932,ucs-bom
set ffs=unix

set hlsearch
set incsearch
set showmatch		" match when indicator is over them

set autoindent

set autoread

set number

set title                " change the terminal's title

set visualbell           " don't beep
set noerrorbells         " don't beep

" Disable swap file
set nobackup
set noswapfile


"Custom key binding
" change the mapleader from \ to ,
let mapleader=","

" Toggle paste mode on and off
set pastetoggle=<leader>p

" Clear highlight text
nmap <silent> <leader>h :nohlsearch<CR>

" Reload vimrc
"nmap <silent> <leader>r :source ~/.vimrc<CR>

" move by rows, not linenumber
nnoremap j gj
nnoremap k gk

" Command + c, copy to system clipboard
vmap <C-c> "+yi

" Command-model, use emacs key binding
cnoremap <C-a> <Home>
cnoremap <C-e> <End>
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>
cnoremap <C-b> <Left>
cnoremap <C-f> <Right>
cnoremap <M-b> <S-Left>
cnoremap <M-f> <S-Right>


" mac crontab error: using an empty one
autocmd filetype crontab set nobackup nowritebackup


" ----- Plugin-Specific Settings --------------------------------------

" ----- altercation/vim-colors-solarized settings -----
set t_Co=256    " 256 color support
" use solarized color scheme
set background=dark
colorscheme solarized

" ----- bling/vim-airline settings -----
" Always show statusbar
set laststatus=2

" Fancy arrow symbols, requires a patched font
" To install a patched font, run over to
"     https://github.com/abertsch/Menlo-for-Powerline
" download all the .ttf files, double-click on them and click "Install"
" Finally, uncomment the next line
let g:airline_powerline_fonts = 0

" Show PASTE if in paste mode
let g:airline_detect_paste=1

" Show airline for tabs too
"let g:airline#extensions#tabline#enabled = 1


" ----- jistr/vim-nerdtree-tabs -----
" Open/close NERDTree Tabs
map <Leader>n <plug>NERDTreeTabsToggle<CR>
" NERDTree close on startup
let g:nerdtree_tabs_open_on_console_startup = 0


" ----- scrooloose/syntastic settings -----
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*

"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_loc_list_height = 5
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_auto_jump = 3

"let g:syntastic_check_on_open = 0
"let g:syntastic_check_on_wq = 0


" ----- tpope/vim-dispatch settings -----
" Compiler


" ----- szw/vim-tags settings -----
let g:vim_tags_use_vim_dispatch = 1


" ----- majutsushi/tagbar settings -----
" Open/close tagbar with \b
nmap <silent> <leader>b :TagbarToggle<CR>
" Uncomment to open tagbar automatically whenever possible
"autocmd BufEnter * nested :call tagbar#autoopen(0)


" ctrlp settings
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_root_markers = ['pom.xml', '.p4ignore']


" eclim
"let g:EclimCompletionMethod = 'omnifunc'

" neocomplete setting
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Enable at startup
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Minimum syntax keyword length
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

"" use eclim as backend
"if !exists('g:neocomplete#force_omni_input_patterns')
"    let g:neocomplete#force_omni_input_patterns = {}
"endif
"let g:neocomplete#force_omni_input_patterns.java = '\k\.\k*'
"let g:neocomplete#force_omni_input_patterns.python = '\k\.\k*'

" 自动关闭预览
let g:neocomplete#enable_auto_close_preview = 1


" ----- airblade/vim-gitgutter settings -----
" Required after having changed the colorscheme
"hi clear SignColumn
" In vim-airline, only display "hunks" if the diff is non-zero
let g:airline#extensions#hunks#non_zero_only = 1

" vim-fugitive


" ----- Raimondi/delimitMate settings -----
let delimitMate_expand_cr = 1
augroup mydelimitMate
  au!
  au FileType markdown let b:delimitMate_nesting_quotes = ["`"]
  au FileType tex let b:delimitMate_quotes = ""
  au FileType tex let b:delimitMate_matchpairs = "(:),[:],{:},`:'"
  au FileType python let b:delimitMate_nesting_quotes = ['"', "'"]
augroup END


" VOoM
"nmap <silent> <leader>l :Voom latex<CR>


" vim-better-whitespace
" strip all trailing whitespace everytime you save the file for all file types.
"autocmd BufWritePre * StripWhitespace
